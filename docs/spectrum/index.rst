
==================
The Spectrum class
==================

This module defines the :class:`~radis.spectrum.spectrum.Spectrum` class, with several methods 
that can be  applied after the Spectrum was calculated: rescale, apply 
instrumental slit function, store or retrieve from a Spectrum database. 

How to initialize a Spectrum object?
------------------------------------

Spectrum objects are generated by the RADIS line-by-line module. They can 
also be generated from numpy arrays, or files. 

From numpy arrays, use :meth:`~radis.spectrum.spectrum.Spectrum.from_array` ::

    # w, T are two numpy arrays 
    from radis import Spectrum
    s = Spectrum.from_array(w, T, 'transmittance_noslit', 
                               waveunit='nm', unit='I/I0')
                               
              
From a file, use , use :meth:`~radis.spectrum.spectrum.Spectrum.from_txt` ::
                 
    # 'exp_spectrum.txt' contains a spectrum
    from radis import Spectrum
    s = Spectrum.from_txt('exp_spectrum.txt', 'radiance', 
                               waveunit='nm', unit='mW/cm2/sr/nm')

Convenience functions have been added to handle the usual cases: 
:func:`~radis.spectrum.spectrum.calculated_spectrum`, 
:func:`~radis.spectrum.spectrum.transmittance_spectrum` and
:func:`~radis.spectrum.spectrum.experimental_spectrum`::

    # w, T, I are numpy arrays for wavelength, transmittance and radiance
    from radis import calculated_spectrum, transmittance_spectrum, experimental_spectrum
    s1 = calculated_spectrum(w, I, wunit='nm', Iunit='W/cm2/sr/nm')     # creates 'radiance_noslit'  
    s2 = transmittance_spectrum(w, T, wunit='nm')                       # creates 'transmittance_noslit'
    s3 = experimental_spectrum(w, I, wunit='nm', Iunit='W/cm2/sr/nm')   # creates 'radiance'    
    
    
How to get spectral quantities?
-------------------------------

Spectral quantities (radiance, transmittance, etc.) can be stored under 
different formats in a Spectrum object (with wavenumbers, or wavelengths
in air, or wavelengths in vacuum, for a given unit, etc.) 

It is recommended to use the .get() method to get exactly what you want::
    
    w, I = s.get('transmittance_noslit', wunit='cm-1')  
    _, T = s.get('radiance_noslit', wunit='nm', Iunit='W/cm2/sr/nm',
                 medium='air')  
        
The default quantities are::

    # Convoluted with slit function:
    'radiance', 'transmittance', 'emissivity'
    
    # Not convoluted: 
    'radiance_noslit', 'transmittance_noslit', 'emisscoeff', 'absorbance', 
    'abscoeff', 'abscoeff_continuum', 'emissivity_noslit'
    
    
How to calculate missing quantities?
------------------------------------

Some spectral quantities can be infered from quantities stored in the Spectrum 
if enough conditions are given. For instance, transmittance can be recomputed
from the spectral absorption coefficient if the path length is stored in the 
conditions. 

The :meth:`~radis.spectrum.rescale.update` method can be used to do that. 
Example::

    # w, A are numpy arrays for wavenumber and absorption coefficient
    s = Spectrum.from_array(w, A, 'abscoeff', wunit='cm-1')
    s.update('transmittance_noslit')
    
Or, all derivable quantities can be computed using .update('all') or simply .update()::

    s.update() 
    

How to update Spectrum conditions?
----------------------------------

Spectrum conditions are stored in a :attr:`~radis.spectrum.spectrum.Spectrum.conditions` dictionary 

Conditions can be updated a posteriori by modifying the dictionary::

    s.conditions['path_length'] = 10    # cm 
    
Check s.cond_units to get the units 



How to apply instrumental slit function?
----------------------------------------

Use :meth:`~radis.spectrum.spectrum.Spectrum.apply_slit`::

    s.apply_slit(1.5)    # nm 
    

How to plot spectral quantities?
--------------------------------

Use :meth:`~radis.spectrum.spectrum.Spectrum.plot`::

    s.plot('radiance_noslit')
    
    
How to save and retrieve a Spectrum object?
-------------------------------------------

Use :meth:`~radis.spectrum.spectrum.Spectrum.store`::
            
    s.store(temp_file_name, compress=True)
    s2 = load_spec(temp_file_name)

    
How to compare Spectrum objects?
--------------------------------

    
    
